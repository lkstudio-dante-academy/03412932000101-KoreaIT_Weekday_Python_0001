import os
import sys

"""
파일 시스템 (File System) 이란?
- 파일을 관리하고 제어 할 수 있는 기능을 의미한다. (+ 즉, 파일 시스템을 활용하면 반영구적으로 데이터를
저장하는 것이 가능하다.)

프로그램은 주 기억 장치 (+ Ex. 메모리) 상에 위치하기 때문에 프로그램이 종료되고 나면
프로그램이 사용하고 있던 데이터도 모두 사라지는 단점이 존재한다. (+ 즉, 변수는 주 기억 장치 상에
선언 된다는 것을 알 수 있다.)

따라서 프로그램이 사용하고 있던 데이터를 반영구적으로 저장하기 위해서는 주 기억 장치가 아닌
다른 기억 장치 (+ Ex. 보조 기억 장치) 에 저장 할 필요가 있으며 이때 파일을 활용하는 것이 가능하다. (+ 즉,
파일은 보조 기억 장치 상에 생성 된다는 것을 알 수 있다.)

프로그램은 사용하고 있던 데이터를 파일에 저장하고 읽어들임으로서 데이터를 반영구적으로 유지하는 것이 가능하다.
(+ 즉, 프로그램이 실행 될 때 파일에 존재하는 데이터를 읽어들임으로서 이전에 실행 되었을 때 사용한 데이터를 계속
유지한다는 것을 의미한다.)

Python 파일 제어 방법
- Python 으로 제작한 프로그램에서 파일에 데이터를 저장하거나 읽어들이기 위해서는 먼저 스트림 (Stream) 을
생성 할 필요가 있다.

스트림 (Stream) 이란?
- 데이터를 이동 시킬 수 있는 통로를 의미하며 프로그램과 파일은 스트림을 통해 데이터를 저장하거나 읽어들이는 것이
가능하다.

단, 스트림은 컴퓨터에서 공통적으로 사용 되는 자원이기 때문에 스트림을 사용했으면 반드시 스트림을
컴퓨터에게 반환해줘야한다. (+ 즉, 스트림을 반환하지 않으면 불필요한 자원을 계속 유지하게 됨으로서 필요 할 때
스트림을 생성하지 못하는 문제를 일으킨다는 것을 알 수 있다.)

스트림은 단방향이기 때문에 프로그램과 파일 간에 데이터를 서로 주고 받기 위해서는 2 개의 스트림이 필요하다 (+ 즉,
프로그램에서 파일에 데이터를 내보내기 위한 스트림 1 개와 파일에서 프로그램으로 데이터를 읽어들이기 위한
스트림 1 개가 필요하다는 것을 알 수 있다.)

Python 스트림 생성 방법
- open 함수

위와 같이 Python 은 스트림을 생성하기 위한 open 함수를 지원하며 해당 함수를 활용하면 간단하게 스트림을
생성하는 것이 가능하다. (+ 즉, open 함수는 반환 데이터로 스트림을 반환한다는 것을 알 수 있다.)

open 함수 사용 방법
- open("확장자를 포함한 파일 경로", "파일 모드")

Ex)
oWStream = open("SomeFile.txt", "wt")
oWStream.write("Hello, World!")

위와 같이 open 함수를 호출하면 특정 위치에 존재하는 파일과 데이터를 주고 받을 수 있는 스트림을 생성하는 것이
가능하다.

또한 open 함수는 파일이 존재하지 않을 경우 파일을 생성하는 역할도 수행한다. (+ 즉, 파일이 없으면 파일을 생성 후
스트림을 생성한다는 것을 알 수 있다.)

단, oepn 함수에 의해서 파일이 생성되는 경우는 스트림을 출력용으로 생성했을때만 가능하다. (+ 즉, 스트림을
입력용으로 생성 할 경우 파일은 생성되지 않는다는 것을 알 수 있다.)

파일 모드 (File Mode) 란?
- 파일 입/출력 모드 (File Input/Output Mode) 와 파일 개방 모드 (File Open Mode) 를 조합한 모드를
의미한다. (+ 즉, 파일 모드에 따라 스트림의 용도가 달라진다는 것을 알 수 있다.)

Python 파일 입/출력 모드 종류
- r : 읽기용
- w : 쓰기용
- a : 쓰기용

위와 같이 파일 입/출력 모드에는 읽기용과 쓰기용이 존재하며 읽기용으로 스트림을 생성하면 스트림을 통해 파일로부터
데이터를 읽어들이는 것이 가능하며 쓰기용으로 스트림을 생성하면 파일에 데이터를 기록하는 것이 가능하다.

w 모드 (Write Mode) vs a 모드 (Append Mode)
- w 모드는 파일에 데이터가 존재 할 경우 데이터를 모두 제거하고 스트림을 생성하는 반면 a 모드는 파일에 존재하는
데이터를 제거하지 않고 스트림을 생성하는 차이점이 존재한다. (+ 즉, 파일에 존재하는 데이터의 제거 유/무를
제외하면 w 모드와 a 모드는 동일하다는 것을 알 수 있다.)

Python 파일 개방 모드 종류
- t : 텍스트 모드
- b : 바이너리 모드

t 모드 (Text Mode) vs b 모드 (Binary Mode)
- t 모드는 데이터를 입/출력 하는 과정에서 개행 문자 (\n) 를 운영 체제에 맞게 보정하는 반면 b 모드는
개행 문자를 별도로 보정하지 않는 차이점이 존재한다. (+ 즉, t 모드는 데이터가 변형 될 수 있다는 것을 의미한다.)

운영 체제마다 개행을 처리하는 방식이 다르기 때문에 t 모드는 데이터를 입력하는 과정에서 \n <-> \r\n 과 같이
개행 문자에 보정이 발생한다는 특징이 존재한다.

따라서 데이터의 변형 없이 파일을 제어하고 싶다면 b 모드로 스트림을 생성해야한다는 것을 알 수 있다.
"""


# Example 28 (파일 시스템)
def start(args):
	oPath_FileA = "P_E01Example_28_01.txt"
	oPath_FileB = "P_E01Example_28_02.bin"
	
	"""
	쓰기용으로 스트림을 개방 할 경우 파일을 생성해준다.
	
	단, open 함수는 파일은 생성해주지만 디렉토리 (폴더) 는 생성해주지 않기 때문에 만약 특정 경로에 존재하는
	파일을 대상으로 스트림을 생성하고 싶다면 open 함수를 호출하기 전에 반드시 디렉토리의 존재 여부를
	판단해야한다. (+ 즉, 경로 상에 명시 된 디렉토리가 존재하지 않을 경우 내부적으로 예외가 발생한다는 것을
	알 수 있다.)
	"""
	oWStream = open(oPath_FileA, "wt")
	
	for i in range(0, 10):
		oWStream.write("Hello, World!\n")
	
	"""
	close 함수를 호출하면 스트림이 사용하고 있던 자원을 컴퓨터에게 반환하는 것이 가능하다. (+ 즉, 사용이
	완료 된 스트림을 close 함수를 통해 반드시 자원을 반납해야한다는 것을 의미한다.)
	"""
	oWStream.close()
	
	"""
	with ~ as 키워드란?
	- 스트림과 같이 리소스를 안전하게 해제 할 수 있는 키워드를 의미한다. (+ 즉, with ~ as 키워드를 활용하면
	close 와 같은 메서드를 명시적으로 호출하지 않아도 된다.)
	"""
	with open(oPath_FileA, "rt") as oRStream:
		print("=====> 텍스트 <=====")
		
		"""
		readlines 함수를 활용하면 파일에 존재하는 데이터를 라인 별로 모두 읽어들이는 것이 가능하다.
		
		readlines 함수는 파일에 존재하는 모든 데이터를 라인 별로 읽어들여서 리스트로 결과를 반환해주기 때문에
		for 문과 같은 반복문에 활용하는 것이 가능하다.
		
		만약 모든 라인이 아니라 한 라인만 읽어들이고 싶을 경우에는 readline 함수를 활용하면 된다.
		
		Ex)
		oStr = oRStream.readline()
		print(oStr)
		
		위와 같이 readline 함수를 호출하면 파일에서 한 라인을 읽어들여서 문자열로 반환한다는 것을 알 수 있다.
		"""
		for oStr in oRStream.readlines():
			print(oStr, end = "")
	
	with open(oPath_FileB, "wb") as oWStream:
		for i in range(0, 10):
			nVal = i + 1
			
			"""
			바이너리 모드는 바이트 단위로 데이터를 입/출력 하기 때문에 정수와 같은 데이터를 직접적으로
			사용하는 것이 불가능하다. (+ 즉, 정수 등의 데이터를 바이트 단위 데이터로 변경해줘야한다는 것을
			알 수 있다.)
			"""
			oWStream.write(nVal.to_bytes(4))
	
	with open(oPath_FileB, "rb") as oRStream:
		print("\n=====> 바이너리 <=====")
		
		while True:
			oBytes = oRStream.read(4)
			
			# 읽어 들 일 데이터가 없을 경우
			if not oBytes:
				break
			
			nVal = int.from_bytes(oBytes)
			print(f"{nVal}, ", end = "")
		
		print()
