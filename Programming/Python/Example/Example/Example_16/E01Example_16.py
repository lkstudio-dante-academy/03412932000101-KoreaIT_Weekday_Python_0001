import os
import sys

from Example.Example_16.CCharacter import CCharacter

"""
클래스 (Class) 란?
- 데이터와 함수를 하나의 그룹을 관리 할 수 있는 기능을 의미한다. (+ 즉, 클래스를 활용하면 연관 된 데이터와 함수를
하나의 쌍으로 관리 하는 것이 가능하다.)

클래스는 객체 지향 프로그래밍의 핵심이 되는 사물 (객체) 을 표현하기 위한 수단으로 활용 된다.

객체 지향 프로그래밍 (Object Oriented Programming) 이란?
- 프로그램의 구조를 설계하는 방식 중 하나로서 사물과 사물 간에 상호 작용을 통해 프로그램이 동작하도록 설계하는
방식을 의미한다. (+ 즉, 객체 지향 프로그래밍에서 가장 핵심이 되는 것은 사물이라는 것을 알 수 있다.)

객체 지향 프로그래밍은 특정 역할을 수행 할 수 있는 사물을 정의하기 위한 수단이 필요하며
이때 활용되는 것이 클래스이다. (+ 즉, 사물이 지니고 있는 특성을 속성과 행위로 나누어서 속성은 변수를 통해 표현하고
행위는 함수를 통해 표현한다는 것을 의미한다.)

클래스를 통해 정의 된 사물은 객체화 과정을 통해 실제 동작하는 대상이 된다. (+ 즉, 클래스는 객체를 생성하기 위한
틀의 개념이라는 것을 알 수 있다.)

Python 클래스 정의 방법
- class + 클래스 이름 + 클래스 멤버 (+ 변수, 함수 등등...)

Ex)
class CSomeClass:
	def __init__(self):
		self.m_nVal = 0
		
	def showInfo(self):
		# Do Something
		
oSomeObj = CSomeClass()
oSomeObj.showInfo()

위와 같이 클래스 내부에 선언 된 변수나 함수를 멤버라고 하며 정의 된 클래스는 자료형처럼 활용하는 것이 가능하다.
(+ 즉, 클래스는 사용자가 필요에 따라 직접 정의해서 활용하는 사용자 정의 자료형이라는 것을 알 수 있다.)

클래스는 참조 형식 자료형이기 때문에 클래스를 통해 객체를 생성하면 해당 객체를 참조 할 수 있는 참조 값이
반환 된다. (+ 즉, oSomeObj 변수에는 CSomeClass 를 통해 생성 된 객체의 참조 값이 할당 된다는 것을 알 수 있다.)
"""


# Example 15 (클래스 - 1)
def start(args):
	"""
	아래와 같이 __init__ 함수를 활용하면 객체를 생성과 동시에 특정 데이터로 해당 객체를 초기화하는 것이 가능하다.
	(+ 즉, __init__ 함수는 다른 객체 지향 언어에서 지원하는 생성자와 유사한 개념이라는 것을 알 수 있다.)

	단, __init__ 함수는 객체를 생성하는 과정에서 인터프리터에 의해서 자동으로 호출되기 때문에 __init__ 함수에
	매개 변수가 존재 할 경우 반드시 매개 변수의 개수만큼 데이터를 전달 할 필요가 있다. (+ 즉,
	매개 변수와 입력 데이터의 개수가 일치하지 않으면 컴파일 에러가 발생한다는 것을 알 수 있다.)
	"""
	oCharacterA = CCharacter()
	
	"""
	. (멤버 지정 연산자) 란?
	- 모듈이나 클래스 하위에 접근 할 수 있는 연산자를 의미한다. (+ 즉, 객체를 대상으로
	멤버 지정 연산자를 사용 할 경우 객체 하위에 존재하는 멤버에 접근하는 것이 가능하다.)
	"""
	oCharacterA.m_nLv = 1
	
	oCharacterA.m_nHp = 10
	oCharacterA.m_nAtk = 5
	
	oCharacterB = CCharacter()
	oCharacterB.m_nLv = 10
	oCharacterB.m_nHp = 150
	oCharacterB.m_nAtk = 50
	
	print("=====> 캐릭터 - A <=====")
	oCharacterA.showInfo()
	
	print("\n=====> 캐릭터 - B <=====")
	oCharacterB.showInfo()
