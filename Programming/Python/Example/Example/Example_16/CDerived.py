import os
import sys

from Example.Example_13.CBase import CBase


# 자식 클래스
class CDerived(CBase):
	# 초기화
	def __init__(self, a_nVal, a_fVal, a_oStr):
		"""
		함수 오버라이딩 (Function Overriding) 이란?
		- 부모 클래스에 존재하는 멤버 함수를 자식 클래스에서 재정의 할 수 있는 기능을 의미한다. (+ 즉,
		함수 오버라이딩을 활용하면 부모 클래스와 다른 명령문을 자식 클래스에 작성하는 것이 가능하다.)
		
		자식 클래스에 부모 클래스와 동일한 메서드를 구현 할 경우 해당 메서드는 부모 클래스에 존재하는 메서드와
		오버라이드 관계가 된다.
		
		멤버 함수가 오버라이드 관계가 되면 자식 클래스에 존재하는 멤버 함수가 더 우선 순위가 높기 때문에
		해당 메서드를 호출 할 경우 자식 클래스에 존재하는 멤버 함수가 호출 된다.
		
		super 함수란?
		- 부모 객체에 대한 참조 값을 가져오는 역할을 수행하는 함수를 의미한다. (+ 즉, super 함수를 활용하면
		부모 클래스에 존재하는 멤버에 접근하는 것이 가능하다.)
		
		부모 클래스에 존재하는 멤버 함수를 자식 클래스에서 재정의 했을 경우 함수 오버라이딩에 의해서
		자식 클래스에 존재하는 멤버 함수가 호출 된다.
		
		만약 자식 클래스에 존재하는 멤버 함수가 아니라 부모 클래스 존재하는 멤버 함수를 호출하고 싶다면
		super 함수를 활용하면 된다. (+ 즉, super 함수를 통해 부모 클래스에 존재하는 멤버 함수를
		호출하겠다는 것을 Python 인터프리터에게 알리는 것이 가능하다.)
		"""
		
		"""
		아래와 같이 super 함수를 활용하면 부모 클래스에 존재하는 동일한 이름의 멤버 함수를 호출하는 것이
		가능하다.
		
		특히 __init__ 함수는 객체를 초기화하는 역할을 수행하기 때문에 자식 클래스에서 __init__ 함수를
		오버라이드 했을 경우 반드시 부모 클래스에 존재하는 __init__ 함수를 호출해줘야한다. (+ 즉,
		부모 클래스에 존재하는 __init__ 함수를 호출하지 않으면 부모 클래스 객체가 초기화되지 않아 문제를
		발생 시킨다는 것을 알 수 있다.)
		"""
		super().__init__(a_nVal, a_fVal)
		self.m_oStr = a_oStr
		
	# 정보를 출력한다
	def showInfo(self):
		super().showInfo()
		print(f"문자열 : {self.m_oStr}")
