import os
import sys

"""
자료형 (Data Type) 이란?
- 데이터를 해석하는 방법을 의미한다. (+ 즉, 동일한 형태의 데이터라고 하더라도 자료형에 따라 처리 방식이
달라진다는 것을 알 수 있다.)

또한 자료형은 데이터가 표현 할 수 있는 최대 범위를 제한하는 역할을 수행한다. (+ 즉, 자료형마다 데이터의 최대
표현 범위가 다르다는 것을 알 수 있다.)

Python 자료형은 데이터를 처리하는 방법에 따라 값 형식 자료형과 참조 형식 자료형으로 구분 된다.

Python 자료형 종류 - 숫자
- 정수 (Integer)
- 실수 (Floating Point)

Python 자료형 종류 - 컬렉션
- 리스트 (List)					<- 참조 형식
- 딕셔너리 (Dictionary)			<- 참조 형식

Python 자료형 종류 - 기타
- 논리 (Bool)
- 문자열 (String)			<- 참조 형식
- 클래스 (Class)				<- 참조 형식

값 형식 자료형 vs 참조 형식 자료형
- 값 형식 자료형은 데이터 자체를 다루기 때문에 값 형식 자료형 변수를 다른 변수에 할당하면 사본이 만들어진다.
(+ 즉, 사본 변수의 데이터를 변경해도 원본 변수는 영향을 받지 않는다는 것을 알 수 있다.)

반면 참조 형식 자료형은 데이터를 지니고 있는 대상은 따로 존재하고 해당 대상에 대한 참조 값을 다루기 때문에
참조 형식 자료형 변수를 다른 변수에 할당하면 얕은 복사가 발생하는 차이점이 존재한다. (+ 즉, 사본 변수를 통해
참조하는 대상이 지닌 데이터를 변경하면 원본 변수도 영향을 받는다는 것을 알 수 있다.)

변수 (Variable) 란?
- 데이터를 저장하거나 읽어 들 일 수 있는 공간을 의미한다. (+ 즉, 변수를 활용하면 특정 데이터를 저장 후 필요 할 때
재사용하는 것이 가능하다.)

변수는 메모리 (주 기억 장치) 에 위치하기 때문에 변수에 접근하기 위한 수단이 필요하며 이때 활용되는 것이
변수의 이름이다. (+ 즉, 변수 이름을 통해 특정 변수를 제어하는 것이 가능하다.)

Python 변수 선언 방법
- 변수 이름 + 데이터 할당

Python 은 다른 프로그래밍 언어와 달리 변수를 선언하기 위한 별도의 과정이 필요 없으며 데이터를 할당하는 과정에서
자동으로 변수가 선언되는 특징이 존재한다.

Ex)
nInt = 0
fFloat = 0.0

위와 같이 변수 이름을 명시 한 후 = (할당 연산자) 를 통해 데이터를 할당하면 변수가 선언 된다는 것을 알 수 있다.

단, 해당 이름의 변수가 이미 존재 할 경우 새로운 변수를 선언하는 것이 아니라 기존에 선언 된 변수에 데이터를
할당되기 때문에 주의가 필요하다. (+ 즉, 기존에 선언 된 변수에 데이터를 할당 할 경우 해당 변수에 할당 된 데이터를
덮어쓴다는 것을 알 수 있다.)

Python 이름 작성 규칙
- Python 는 다국어를 지원하기 때문에 영어를 비롯한 다양한 문자를 가지고 이름을 작성하는 것이 가능하다. (+ 단,
대부분의 특수 문자는 사용이 불가능하다.)

단, 전통적으로 이름에 사용 할 수 있는 문자 종류는 알파벳 대/소문자, _ (언더 스코어), 숫자 만을
사용하는 것이기 때문에 가능하면 해당 문자만을 사용하는 것을 추천한다.

따라서 다양한 문자를 조합해서 이름을 작성하는 것이 가능하지만 첫 문자는 숫자가 될 수 없다. (+ 즉, 이름의 첫 문자를
숫자로 명시 할 경우 컴파일 에러가 발생한다는 것을 알 수 있다.)

또한 이름은 대/소문자를 구분하기 때문에 같은 단어라 하더라도 대/소문자 조합이 다르면 서로 다른 이름으로 구분 된다.

Ex)
nval = 0;
nVal = 0;

nVal_01 = 0;
01_nVal = 0;			<- 컴파일 에러

위와 같이 nval 변수와 nVal 변수는 동일한 단어지만 V 문자가 서로 다르기 때문에 서로 다른 변수라는 것을 알 수 있다.
(+ 즉, 대/소문자를 구별한다는 것을 알 수 있다.)

nVal_01 변수와 01_nVal 변수는 변수 이름에 숫자가 들어갔지만 nVal_01 변수는 첫 문자가 숫자가 아니기 때문에
정상적으로 동작하는 반면 01_nVal 변수는 첫 이름이 숫자이기 때문에 컴파일 에러가 발생한다는 것을 알 수 있다.
"""


# Example 2 (자료형)
def start(args):
	nInt = 10
	fFloat = 3.14
	
	"""
	type 함수란?
	- 변수 or 데이터의 자료형을 가져오는 역할을 수행하는 함수를 의미한다. (+ 즉, type 함수를 활용하면
	특정 데이터의 자료형을 검사해서 적절한 처리를 하는 것이 가능하다.)
	
	문자열 포맷팅이란?
	- 특정 데이터를 조합해서 단어 or 문장을 작성 할 수 있는 기능을 의미한다. (+ 즉, 문자열 포맷팅을 활용하면
	다양한 단어 or 문장을 작성하는 것이 가능하다.)
	
	Ex)
	oStr = "Python"
	
	oWordA = "Hello, {0}".format(oStr)			<- "Hello, Python" 문자열 할당
	oWordB = f"Hello, {oStr}"					<- "Hello, Python" 문자열 할당
	
	위와 같이 format 함수를 활용하면 특정 데이터를 조합해서 단어 or 문장을 작성하는 것이 가능하다. (+ 즉,
	{0} 와 같은 서식 문자는 실제 데이터로 치환 되어서 문자열을 생성 된다는 것을 알 수 있다.)
	
	또한 f 문자열을 이용해서 문자열 포맷팅을 하는 것도 가능하다. (+ 즉,
	{ } 기호 사이에 변수 or 데이터를 명시하면 해당 데이터로 치환 되어서 문자열을 생성 된다는 것을 알 수 있다.)
	"""
	print("=====> 자료형 - 숫자 <=====")
	print(f"정수 ({type(nInt)}) : {nInt}")
	print(f"실수 ({type(fFloat)}) : {fFloat}")
	
	oList = [1, 2, 3, 4, 5]
	oDict = {"Key_01": 1, "Key_02": 2, "Key_03": 3}
	
	print("\n=====> 자료형 - 컬렉션 <=====")
	print(f"리스트 ({type(oList)}) : {oList}")
	print(f"딕셔너리 ({type(oDict)}) : {oDict}")
	
	bIsBool = True
	oStr = "Hello, World!"
	
	print("\n=====> 자료형 - 기타 <=====")
	print(f"논리 ({type(bIsBool)}) : {bIsBool}")
	print(f"문자열 ({type(oStr)}) : {oStr}")
