import os
import sys

"""
컴퓨터가 데이터를 표현하는 방법
- 컴퓨터는 내부적으로 사용하는 모든 데이터를 0 과 1 로 이루어 진 2 진수 (Binary Number) 를 통해 표현한다.
(+ 즉, 컴퓨터는 숫자만을 다루는 기계라는 것을 알 수 있다.)

이는 트랜지스터에 전해지는 전류를 디지털로 표현 한 것으로 전류가 흐르는 상태를 1 로 표현하고
전류가 흐르지 않는 상태를 0 으로 표현하기 때문이다.

진수 (Number System) 란?
- 특정 범위의 수를 기수로 하는 숫자 체계를 의미한다. (+ Ex. 10 진수 등등...)

컴퓨터는 물리적인 전류 신호로 동작하기 때문에 전류가 흐르고 있는 상태와 전류가 흐르지 않는 상태를
표현하기 위해서 2 진수를 사용한다.

단, 사람은 일반적으로 10 진수가 익숙하기 때문에 2 진수 <-> 10 진수 간에 변환 방법에
익숙해 질 필요가 있다.

프로그램에서 주로 사용 되는 숫자 체계
- 2 진수				<- 0 ~ 1 을 기수로 하는 숫자 체계
- 8 진수				<- 0 ~ 7 을 기수로 하는 숫자 체계
- 10 진수			<- 0 ~ 9 를 기수로 하는 숫자 체계
- 16 진수			<- 0 ~ 9, A ~ F 를 기수로 하는 숫자 체계

2 진수 -> 10 진수로 변환하는 방법
- 2 진수는 2 단위로 자릿 수가 증가하기 때문에 각 자리를 2 의 거듭 제곱으로 곱해주면 된다.

Ex)
1010			<- (1 * 2^3) + (0 * 2^2) + (1 * 2^1) + (0 * 2^0)

위와 같이 2 진수로 표현 된 숫자 1010 을 10 진수로 변환하면 10 이 된다는 것을 알 수 있다. (+ 즉,
다른 진수로 표현 된 숫자도 위의 과정을 통해 10 진수로 변환이 가능하다는 것을 의미한다.)

10 진수 -> 2 진수로 변환하는 방법
- 몫이 0 이 나올 때 까지 10 진수를 2 로 나눈 후 나머지를 역순으로 나열하면 된다.

Ex)
10 / 2			<- 0
5 / 2			<- 1
2 / 2			<- 0
1 / 2			<- 1
0

위와 같이 10 진수로 표현 된 숫자 10 을 2 진수로 변환하면 1010 이 된다는 것을 알 수 있다. (+ 즉,
위의 과정을 응용하면 10 진수로 표현 된 숫자를 다른 진수로 변환이 가능하다는 것을 의미한다.)

2 진수 <-> 8 진수 간에 변환 방법
- 2 진수 3 자리는 8 진수 1 자리로 표현이 가능하기 때문에 이를 활용하면 2 진수 <-> 8 진수 간에 변환을
간단하게 계산하는 것이 가능하다.

Ex)
110 011 001 <-> 631

위와 같이 2 진수를 뒤에서부터 3 자리씩 끊어서 8 진수로 변환 하거나 8 진수 1 자리를
2 진수 3 자리로 변환하는 것으로 2 진수 <-> 8 진수 간에 변환을 간단하게 계산하는 것이 가능하다.

2 진수 <-> 16 진수 간에 변환 방법
- 2 진수 4 자리는 16 진수 1 자리로 표현이 가능하기 때문에 이를 활용하면 2 진수 <-> 16 진수 간에 변환을
간단하게 계산하는 것이 가능하다.

Ex)
1100 0011 <-> C3

위와 같이 2 진수를 뒤에서부터 4 자리씩 끊어서 16 진수로 변환 하거나 16 진수 1 자리를
2 진수 3 자리로 변환하는 것으로 2 진수 <-> 16 진수 간에 변환을 간단하게 계산하는 것이 가능하다.
"""


# Example 3 (데이터 표현 방법)
def start(args):
	"""
	아래와 같이 숫자 (정수형) 앞에 접두어를 명시함으로서 2 진수, 8 진수, 16 진수 로 숫자를 표기하는 것이 가능하다.
	(+ 즉, 숫자 앞에 접두어를 따로 명시하지 않으면 10 진수라는 것을 알 수 있다.)
	
	Ex)
	2 진수 : 0b10			<- 10 진수 2
	8 진수 : 0o10			<- 10 진수 8
	16 진수 : 0x10			<- 10 진수 16
	"""
	nVal_Bin = 0b10
	nVal_Oct = 0o10
	nVal_Hex = 0x10
	
	"""
	아래와 같이 서식 문자 옵션을 활용하면 숫자를 10 진수가 아닌 다른 진수 형태로 출력하는 것이 가능하다. (+ 즉,
	print 함수는 기본적으로 10 진수 형태로 숫자를 출력한다는 것을 알 수 있다.)
	"""
	print(f"10 진수 ({nVal_Bin}) -> 2 진수 ({nVal_Bin:#b})")
	print(f"10 진수 ({nVal_Oct}) -> 8 진수 ({nVal_Oct:#o})")
	print(f"10 진수 ({nVal_Hex}) -> 16 진수 ({nVal_Hex:#x})")
	
	"""
	input 함수란?
	- 콘솔로부터 데이터를 입력 받는 역할을 수행하는 함수를 의미한다. (+ 즉, input 함수를 활용하면
	프로그램과 사용자가 상호 작용하는 것이 가능하다.)
	
	단, input 함수는 콘솔에서 입력 받은 데이터를 문자열로 반환하기 때문에 콘솔에서 숫자와 같이 데이터를
	입력 받고 싶다면 입력 받은 문자열을 기반으로 후처리가 필요하다.
	
	int 함수란?
	- 숫자로 구성 된 문자열을 정수형으로 변환하는 역할을 수행하는 함수를 의미한다. (+ 즉, int 함수를 활용하면
	콘솔로부터 숫자를 입력 받는 것이 가능하다.)
	
	Ex)
	oStr_Input = input("입력 : ")			<- 문자열 "10" 입력했을 경우
	nVal = int(oStr_Input)					<- 문자열 "10" -> 정수 10 으로 변환
	
	위와 같이 input 함수를 통해 콘솔로부터 입력받은 데이터를 int 함수를 이용해 숫자로 변환하는 것이 가능하다.
	"""
	nVal = int(input("\n정수 입력 : "))
	
	"""
	\n 은 개행 문자를 의미한다. (+ 즉, 해당 문자를 사용하면 다음 줄에 단어 or 문장을 출력하는 것이 가능하다.)
	
	print 함수는 단어 or 문장을 출력 후 자동으로 다음 줄로 개행이 되지만 \n 을 이용하면 명시적으로 개행하는 것이
	가능하다.
	"""
	print("\n=====> 결과 <=====")
	
	"""
	bin 과 같은 함수를 활용하면 숫자를 특정 진수 표기법으로 변환하는 것이 가능하다.
	
	Ex)
	bin(10)			<- 2 진수 "0b1010" 로 변환
	oct(10)			<- 8 진수 "0o12" 로 변환
	hex(10)			<- 16 진수 "0xa" 로 변환
	
	위와 같이 bin 과 같은 함수는 숫자를 특정 진수 표기법으로 된 문자열을 반환한다는 것을 알 수 있다.
	"""
	oStr_Bin = bin(nVal)
	oStr_Oct = oct(nVal)
	oStr_Hex = hex(nVal)
	
	print(f"10 진수 ({nVal}) -> 2 진수 ({oStr_Bin})")
	print(f"10 진수 ({nVal}) -> 8 진수 ({oStr_Oct})")
	print(f"10 진수 ({nVal}) -> 16 진수 ({oStr_Hex})")
	