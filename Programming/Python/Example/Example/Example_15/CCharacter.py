import os
import sys


# 캐릭터
class CCharacter:
	# 초기화
	def __init__(self):
		"""
		__init__ 함수란?
		- 객체를 생성 할 때 가장 먼저 호출되는 함수를 의미하며 해당 함수는 인터프리터에 의해서
		자동으로 호출 된다. (+ 즉, __init__ 함수를 활용하면 객체를 생성과 동시에 특정 데이터로 초기화하는 것이
		가능하다.)
		
		객체가 생성 되기 위해서는 반드시 __init__ 함수가 호출 되어야하며 만약 특정 클래스에 __init__ 함수가
		존재하지 않을 경우 인터프리터에 의해서 자동으로 아무런 입력도 받지 않는 __init__ 함수가 추가 된다.
		
		Python 은 변수 선언만을 위한 문법이 별도로 존재하지 않기 때문에 __init__ 함수를 활용해서
		변수를 선언해주는 것을 추천한다.
		
		Ex)
		class CSomeClass:
			def __init__(self):
				self.m_nVal = 0
				self.m_fVal = 0.0
				
		위와 같이 멤버 변수는 __init__ 함수에서 미리 선언하는 것으로 해당 클래스에
		어떤 멤버 변수가 존재하는지 한눈에 파악하는 것이 가능하다.
		
		self 란?
		- 객체 자신을 가리키는 매개 변수를 의미한다. (+ 즉, self 변수에는 멤버 함수를 호출 할 객체에 대한
		참조 값이 저장 된다는 것을 알 수 있다.)
		
		Python 은 다른 객체 지향 언어와 달리 self 를 명시적으로 입력해야하는 번거로움이 존재한다. (+ 즉,
		self 가 아닌 다른 이름을 사용하는 것도 가능하다는 것을 알 수 있다.)
		
		Python 은 self 를 통해 동일한 클래스에 속해있는 다른 멤버 (+ Ex. 변수) 에 접근하는 것이 가능하다.
		(+ 즉, 멤버 변수를 선언하기 위해서는 반드시 self 를 활용해야한다는 것을 알 수 있다.)
		
		따라서 멤버 함수의 첫 번째 매개 변수는 항상 객체에 대한 참조 값을 할당 받기 위한 self 를
		선언해줘야한다.
		"""
		
		"""
		아래와 같이 self 를 활용하면 멤버 변수를 선언하는 것이 가능하다. (+ 즉, self 를 통해 선언 된 변수는
		지역 변수가 아니라 멤버 변수라는 것을 알 수 있다.)
		"""
		self.m_nLv = 0
		self.m_nHp = 0
		self.m_nAtk = 0
	
	
	# 정보를 출력한다
	def showInfo(self):
		"""
		아래와 같이 선언 된 멤버 변수는 self 를 통해 언제든지 접근하는 것이 가능하다.
		
		단, 선언 되지 않은 멤버 변수에 접근 할 경우 내부적으로 예외가 발생하기 때문에 주의가 필요하다. (+ 즉,
		선언 되지 않은 변수에 접근 할 때와 같은 결과라는 것을 알 수 있다.)
		"""
		print(f"레벨 : {self.m_nLv}")
		print(f"체력 : {self.m_nHp}")
		print(f"공격력 : {self.m_nAtk}")
