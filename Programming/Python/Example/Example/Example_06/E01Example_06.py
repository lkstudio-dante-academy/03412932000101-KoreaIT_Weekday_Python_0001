import os
import sys

"""
반복문이란?
- 프로그램의 흐름을 제어하는 제어문 중 하나로서 특정 조건을 만족 할 동안 명령문의 일부 or 전체를 반복해서
실행하는 기능을 의미한다. (+ 즉, 반복문을 활용하면 사용자가 원할 때 종료되는 프로그램을 제작하는 것이 가능하다.)

Python 으로 제작 된 프로그램은 메인 모듈이 종료되면 프로그램도 종료되는 특징이 존재한다.

따라서 반영구적으로 동작하는 프로그램을 제작하기 위해서는 메인 모듈이 종료되지 않도록 프로그램의 흐름을 제어 할
필요가 있으며 이는 반복문을 활용함으로서 처리가 가능하다. (+ 즉, 반복문을 통해 프로그램의 흐름이 메인 모듈을
종료하지 않도록 명령문의 일부 or 전체를 반복해서 실행한다는 것을 의미한다.)

Python 반복문 종류
- while
- for

Ex)
while 조건문:
	# 조건이 만족 할 동안 실행 할 명령문
	
for i in range(0, 10):
	# 조건이 만족 할 동안 실행 할 명령문
	
while 반복문 vs for 반복문
- 위와 같이 while 반복문은 구조가 단순하기 때문에 사용이 쉽다는 장점이 존재하지만 의도치 않게 무한 루프에
빠질 위험이 for 반복문에 비해 높다는 것을 알 수 있다.

반면 for 반복문은 while 반복문에 비해 구조가 복잡하지만 몇몇 안정 장치로 인해 while 반복문보다 실수로 인한
무한 루프를 작성 할 확률이 떨어진다는 장점이 존재한다.
"""


# Example 6 (반복문 - 1)
def start(args):
	nTimes = int(input("횟수 입력 : "))
	
	print("=====> while 반복문 <=====")
	i = 0
	
	while i < nTimes:
		# 짝수 일 경우
		if i % 2 == 0:
			i += 1
			
			"""
			continue 키워드란?
			- 반복문 내부에서만 사용 가능한 키워드로 프로그램의 현재 흐름을 생략하고 다음 흐름으로 이동시키는
			역할을 수행한다.
			
			continue 키워드를 while 반복문 내부에서 사용 할 경우 주의가 필요하다. (+ 즉,
			continue 키워드에 의해 반복을 끝내기 위한 명령문의 실행을 생략함으로서 의도치 않게 무한 루프에
			빠질 수 있다는 것을 알 수 있다.)
			
			따라서 while 반복문 내부에서 continue 키워드를 사용 할 경우 해당 키워드가 실행되기 전에
			반복을 끝내기 위한 명령문이 실행 되었는지 주시 할 필요가 있다.
			"""
			continue
		
		"""
		print 함수는 문장을 출력하고 나면 자동으로 개행 처리가 되는 특징이 존재하지만 개행 처리를
		원치 않을 경우 아래와 같이 end 매개 변수에 빈 문자열을 전달하면 된다.
		"""
		print(f"{i + 1}, ", end = "")
		i += 1
	
	print("\n")
	i = 0
	
	while i < nTimes:
		print(f"{i + 1} 번째 반복 중 입니다.")
		i += 1
	
	print("\n=====> for 반복문 <=====")
	
	"""
	range 함수란?
	- 명시 된 범위 내에 존재하는 정수를 포함하는 리스트를 생성하는 함수를 의미한다. (+ 즉, range 함수를
	활용하면 특정 범위 내에 존재하는 정수를 관리하는 리스트를 손쉽게 생성하는 것이 가능하다.)
	
	for 반복문은 while 반복문과 달리 열거 가능한 데이터 (+ Ex. 리스트 등등...) 에만 사용하는 것이 가능하다.
	(+ 즉, for 반복문만 단독으로 사용하는 것은 불가능하다.)
	
	단, for 반복문은 while 반복문과 달리 반복을 끝내기 위한 조건문과 명령문을 별도로 작성하지 않아도 되기
	때문에 의도치 않게 무한 루프에 빠질 가능성이 낮다는 장점이 존재한다.
	"""
	for i in range(0, nTimes):
		# 짝수 일 경우
		if i % 2 == 0:
			"""
			for 반복문은 while 반복문에 비해 continue 키워드를 비교적 안전하게 사용하는 것이 가능하다.
			(+ 즉, continue 키워드에 의해 프로그램의 현재 흐름이 생략 된다 하더라도 무한 루프에 빠지지 않는다는
			것을 알 수 있다.)
			"""
			continue
		
		print(f"{i + 1}, ", end = "")
	
	print("\n")
	
	for i in range(0, nTimes):
		print(f"{i + 1} 번째 반복 중 입니다.")
